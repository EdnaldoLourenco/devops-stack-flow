name: Build and Deploy Container to Azure Web App

on:
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - '.github/workflows/app-prd.yaml'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/**'
      - '.github/workflows/app-prd.yaml'
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  REGISTRY_IMAGE: "${{ secrets.ACR_NAME }}.azurecr.io/app:${{ github.sha }}"


jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout do código
        uses: actions/checkout@v3

      - name: Manual Trivy Setup
        uses: aquasecurity/setup-trivy@v0.2.3

      - name: Scan do código da aplicação
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: './src'
          format: 'sarif'
          output: 'trivy-results.sarif'
          scanners: 'vuln, secret, misconfig'
          severity: 'CRITICAL,HIGH'
          exit-code: '0' 
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
      - name: Login no Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Log in to ACR
        run: |
          az acr login --name ${{ secrets.ACR_NAME }}
      - name: Build da imagem Docker
        working-directory: src
        run: |
          docker build -t ${{ env.REGISTRY_IMAGE }} .

      - name: Scan Docker image com Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY_IMAGE }}
          format: 'table'
          exit-code: '0'
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      - name: Push da imagem docker
        working-directory: src
        run: |
          docker push ${{ env.REGISTRY_IMAGE }}

      - name: Atualizar o App Service para usar nova imagem
        uses: azure/webapps-deploy@v2
        with:
          app-name: 'app-prod001'
          images: '${{ env.REGISTRY_IMAGE }}'